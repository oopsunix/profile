# =====================================
# Author:   oopsunix
# Version:  1.0.0
# Date:     2025.03.03
# =====================================


[General]
# DNS server
# dns服务，system表示系统自带dns服务器
dns-server = system,223.5.5.5,223.6.6.6,119.29.29.29
# DoH server，标准的url格式，以,分割多个地址
doh-server = https://dns.alidns.com/dns-query,https://doh.pub/dns-query
# DoH3 server，标准的url格式，以,分割多个地址
doh3-server = h3://dns.alidns.com/dns-query
# DoQ server，以quic://开头，以,分割多个地址，默认端口784
doq-server = quic://dns.alidns.com:853

# IP查询模式
ip-mode = dual
# TUN IPv6配置
ipv6-vif = auto
# 网络接口
interface-mode = auto
# GeoIP数据库
geoip-url = https://raw.githubusercontent.com/sooyaaabo/KeleeOne/Loon/GeoData/Country-Masaiki.mmdb
# ASN数据库
ipasn-url = https://raw.githubusercontent.com/sooyaaabo/KeleeOne/Loon/GeoData/GeoLite2-ASN-P3TERX.mmdb
# 绕过路由
bypass-tun = 10.0.0.0/8,100.64.0.0/10,127.0.0.0/8,169.254.0.0/16,172.16.0.0/12,192.0.0.0/24,192.0.2.0/24,192.88.99.0/24,192.168.0.0/16,198.51.100.0/24,203.0.113.0/24,224.0.0.0/4,255.255.255.255/32
# 绕过代理
skip-proxy = 192.168.0.0/16,10.0.0.0/8,172.16.0.0/12,localhost,*.local,e.crashlynatics.com
# 策略切换时关闭连接
disconnect-on-policy-change = false
# 域名拦截行为
domain-reject-mode = DNS
# DNS拦截方式
dns-reject-mode = LoopbackIP
# SNI 辅助规则匹配
sni-sniffing = true

# 直连测试url
internet-test-url = http://connectivitycheck.platform.hicloud.com/generate_204
# internet-test-url = http://wifi.vivo.com.cn/generate_204
# 节点测试url
proxy-test-url = http://bing.com/generate_204
# proxy-test-url = http://www.apple.com/library/test/success.html
# proxy-test-url = http://www.google.com/blank.html
# 延迟测试超时时间秒数
test-timeout = 3

# 资源解析器
resource-parser = https://github.com/sub-store-org/Sub-Store/releases/latest/download/sub-store-parser.loon.min.js

# UDP
# 直连时丢弃STUN
disable-stun = true
# UDP回落策略
udp-fallback-mode = REJECT

# 设置响应ssid环境下使用的策略，如"loon-wifi5g":DIRECT，表示在loon-wifi5g这个wifi网络下使用直连模式，"cellular":PROXY，表示在蜂窝网络下使用代理模式，"default":RULE，默认使用分流模式
# ssid-trigger = SSID:DIRECT
# 是否允许wifi下共享网络
allow-wifi-access = false
# wifi共享开启时http服务的端口
wifi-access-http-port = 7222
# wifi共享开启时socks5服务的端口
wifi-access-socks5-port = 7221

# 强制将原始TCP请求视为HTTP请求处理
force-http-engine-hosts = :0
# 一个节点连续失败几次后进行节点切换
switch-node-after-failure-times = 3



[Proxy]
# 本地节点



[Remote Proxy]
# 订阅节点
# 别名 = 订阅URL




[Remote Filter]
# 筛选节点，筛选后的结果可加入到策略组中，目前支持三种筛选方式
# NodeSelect: 使用在UI上选择的节点。
# NameKeyword: 根据提供的关键词对订阅中所有节点的名称进行筛选，使用筛选后的节点。
# NameRegex: 根据提供的正则表达式对订阅中所有节点的名称进行筛选，使用筛选后的节点。
Sub-ALL = NameRegex,FilterKey = "^(?=.*(.))(?!.*((?i)群|邀请|返利|循环|官网|客服|网站|网址|获取|订阅|流量|到期|机场|下次|版本|官址|备用|过期|已用|联系|邮箱|工单|贩卖|通知|倒卖|防止|国内|地址|频道|无法|说明|使用|提示|特别|访问|支持|(\b(USE|USED|TOTAL|EXPIRE|EMAIL|Panel)\b|(\d{4}-\d{2}-\d{2}|\dG)))).*$"
HK_Filter = NameRegex, FilterKey = "(?i)(港|HK|Hong)"
MO_Filter = NameRegex, FilterKey = "(?i)(澳|MO|MAC|Oman|Macau|Macao)"
TW_Filter = NameRegex, FilterKey = "(?i)(台|TW|Tai)"
SG_Filter = NameRegex, FilterKey = "(?i)(新加坡|坡|狮城|SG|Singapore)"
JP_Filter = NameRegex, FilterKey = "(?i)(日本|川日|东京|大阪|泉日|埼玉|沪日|深日|JP|Japan)"
KR_Filter = NameRegex, FilterKey = "(?i)(韩|韓|首尔|KR|Korea|KOR)"
US_Filter = NameRegex, FilterKey = "(?i)(美|波特兰|达拉斯|俄勒冈|凤凰城|费利蒙|硅谷|拉斯维加斯|洛杉矶|圣何塞|圣克拉拉|西雅图|芝加哥|US|United States)"
UK_Filter = NameRegex, FilterKey = "(?i)(英|伦敦|UK|United Kingdom)"
HOME = NameRegex, FilterKey = "(?i)(Home|WireGuard|Tailscale|FRP|DDNS)"



[Proxy Chain]
# 代理链



[Proxy Group]
# 节点选项
# url-test模式，给提供的url发出http header请求，根据返回结果，选择测速最快的节点，默认间隔600s，测速超时时间5s，为了避免资源浪费，建议节点数不要过多
# Auto = url-test,1,2,3,4,Subs,url = http://bing.com/generate_204,interval = 600

# fallback模式，和url-test类似，不同的是会根据顺序返回第一个可用的节点，为了避免资源浪费，建议节点数不要过多
# Auto1 = fallback,1,2,3,4,Subs,url = http://bing.com/generate_204,interval = 600

#负载均衡，可选三种算法：random：随机选择策略组可用节点，round-robin：轮询策略组可用节点，pcc：在random基础上，针对相同host使用同一节点，此处url用来测试节点可用性，每隔interval进行一次测速，max-timeout参数用于筛选测试时间超过max-timeout的节点为不可用节点
# LoadBalance = load-balance,node1,node2,remoteNodes, url = http://bing.com/generate_204, interval = 600,algorithm = pcc, max-timeout=3000

手动选择 = select,DIRECT,HK,TW,JP,KR,SG,US,img-url = https://raw.githubusercontent.com/sooyaaabo/Loon/main/Icon/Other-Icon/Select.png
延迟选优 = url-test,HK,TW,JP,KR,SG,US,interval = 300,tolerance = 50,img-url = https://raw.githubusercontent.com/sooyaaabo/Loon/main/Icon/Other-Icon/UrlTest.png
故障转移 = fallback,HK,TW,JP,KR,SG,US,interval = 300,max-timeout = 2000,img-url = https://raw.githubusercontent.com/sooyaaabo/Loon/main/Icon/Other-Icon/Fallback.png
负载均衡 = load-balance,HK,TW,JP,KR,SG,US,interval = 300,max-timeout = 2000,algorithm = pcc,img-url = https://raw.githubusercontent.com/sooyaaabo/Loon/main/Icon/Other-Icon/LoadBalance.png
GitHub = select,HK,TW,JP,KR,SG,US,img-url = https://raw.githubusercontent.com/sooyaaabo/Loon/main/Icon/App-Icon/GitHub-02.png
Google = select,HK,TW,JP,KR,SG,US,img-url = https://raw.githubusercontent.com/sooyaaabo/Loon/main/Icon/App-Icon/Google.png
Microsoft = select,HK,TW,JP,KR,SG,US,img-url = https://raw.githubusercontent.com/sooyaaabo/Loon/main/Icon/App-Icon/Microsoft.png
X = select,HK,TW,JP,KR,SG,US,img-url = https://raw.githubusercontent.com/sooyaaabo/Loon/main/Icon/App-Icon/Twitter-02.png
Telegram = select,HK,TW,JP,KR,SG,US,img-url = https://raw.githubusercontent.com/sooyaaabo/Loon/main/Icon/App-Icon/Telegram-01.png
TikTok = select,HK,TW,JP,KR,SG,US,img-url = https://raw.githubusercontent.com/sooyaaabo/Loon/main/Icon/App-Icon/TikTok-02.png
YouTube = select,HK,TW,JP,KR,SG,US,img-url = https://raw.githubusercontent.com/sooyaaabo/Loon/main/Icon/App-Icon/YouTube.png
Netflix = select,HK,TW,JP,KR,SG,US,img-url = https://raw.githubusercontent.com/sooyaaabo/Loon/main/Icon/App-Icon/Netflix-02.png
HK = url-test,HK_Filter,interval = 300,tolerance = 50,img-url = https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/Color/Hong_Kong.png
TW = url-test,TW_Filter,interval = 300,tolerance = 50,img-url = https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/Color/Taiwan.png
SG = url-test,SG_Filter,interval = 300,tolerance = 50,img-url = https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/Color/Singapore.png
JP = url-test,JP_Filter,interval = 300,tolerance = 50,img-url = https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/Color/Japan.png
KR = url-test,KR_Filter,interval = 300,tolerance = 50,img-url = https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/Color/Korea.png
US = url-test,US_Filter,interval = 300,tolerance = 50,img-url = https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/Color/United_States.png
BackHome = fallback,HOME,interval = 300,max-timeout = 3000,img-url = https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/Color/BackHome.png
ALL = select,Sub-ALL,img-url = https://raw.githubusercontent.com/sooyaaabo/Loon/main/Icon/Flag-Icon/WorldMap.png



[Rule]
# Local Rules
#Type:DOMAIN-SUFFIX,DOMAIN,DOMAIN-KEYWORD,USER-AGENT,URL-REGEX,IP-CIDR
#Strategy:DIRECT,PROXY,REJECT
#Options:no-resolve(only for IP-CIDR,IP-CIDR2,GEOIP,IP-ASN)
# IP-CIDR, 192.168.0.0/16, DIRECT
# IP-CIDR, 10.0.0.0/8, DIRECT
# IP-CIDR, 172.16.0.0/12, DIRECT
# IP-CIDR, 127.0.0.0/8, DIRECT
# IP-CIDR6, 2000::/3, DIRECT

IP-CIDR, 10.10.10.0/24, BackHome

FINAL,手动选择



[Remote Rule]
# 订阅规则
https://raw.githubusercontent.com/sooyaaabo/KeleeOne/Loon/Rule/GitHub.list, policy=GitHub, tag=GitHub, enabled=true
https://raw.githubusercontent.com/sooyaaabo/KeleeOne/Loon/Rule/Google.list, policy=Google, tag=Google, enabled=true
https://raw.githubusercontent.com/sooyaaabo/KeleeOne/Loon/Rule/Microsoft.list, policy=Microsoft, tag=Microsoft, enabled=true
https://raw.githubusercontent.com/sooyaaabo/KeleeOne/Loon/Rule/Twitter.list, policy=X, tag=X, enabled=true
https://raw.githubusercontent.com/sooyaaabo/KeleeOne/Loon/Rule/Telegram.list, policy=Telegram, tag=Telegram, enabled=true
https://raw.githubusercontent.com/sooyaaabo/KeleeOne/Loon/Rule/TikTok.list, policy=TikTok, tag=TikTok, enabled=true
https://raw.githubusercontent.com/sooyaaabo/KeleeOne/Loon/Rule/YouTube.list, policy=YouTube, tag=YouTube, enabled=true
https://raw.githubusercontent.com/sooyaaabo/KeleeOne/Loon/Rule/Netflix.list, policy=Netflix, tag=Netflix, enabled=true
https://raw.githubusercontent.com/Loon0x00/LoonLiteRules/main/proxy/YouTube.list, policy=YouTube, tag=YouTube, enabled=true
https://raw.githubusercontent.com/Loon0x00/LoonLiteRules/main/proxy/Telegram.list, policy=Telegram, tag=Telegram, enabled=true
https://raw.githubusercontent.com/Loon0x00/LoonLiteRules/main/direct/cn.list, policy=DIRECT, tag=GEOIP_CN, enabled=true
https://raw.githubusercontent.com/sooyaaabo/Loon/main/Rule/Apple.list, policy=DIRECT, tag=Apple, enabled=true
https://raw.githubusercontent.com/sooyaaabo/Loon/main/Rule/PCDN.list, policy=REJECT, tag=PCDN, enabled=true



[Rewrite]
# Redirect Google Search Service
^https?:\/\/(www.)?(g|google)\.cn https://www.google.com 302



[Script]



[Plugin]
https://kelee.one/Tool/Loon/Plugin/JD_Price.plugin, enabled=true
https://kelee.one/Tool/Loon/Plugin/WARP_Node_Query.plugin, enabled=true
https://kelee.one/Tool/Loon/Plugin/Google.plugin, enabled=true
https://kelee.one/Tool/Loon/Plugin/AppleWeatherEnhancer.plugin, enabled=true
https://kelee.one/Tool/Loon/Plugin/Switch_github_mirror.plugin, enabled=true
https://raw.githubusercontent.com/sooyaaabo/Loon/main/Plugin/QQ.plugin, enabled=true
https://raw.githubusercontent.com/sooyaaabo/Loon/main/Plugin/BoxJs.plugin, enabled=true
https://raw.githubusercontent.com/sooyaaabo/Loon/main/Plugin/1.1.1.1.plugin, enabled=true
https://raw.githubusercontent.com/sooyaaabo/Loon/main/Plugin/StreamingMedia.plugin, enabled=true
https://raw.githubusercontent.com/sooyaaabo/Loon/main/Plugin/NodeTools.plugin, enabled=true
https://raw.githubusercontent.com/sooyaaabo/Loon/main/Plugin/Netisp-x.plugin, enabled=true



[Mitm]
hostname =
ca-p12 =
ca-passphrase =
skip-server-cert-verify = false